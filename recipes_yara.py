# -*- coding: utf-8 -*-
"""Recipes_yara.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PM6y5lk-UWojzFeJBbmk85AhAdi2FX5m
"""



# تثبيت المكتبات المطلوبة في Google Colab
!pip install transformers
!pip install streamlit
!pip install pillow

from huggingface_hub import login

# أدخل مفتاح API الخاص بك هنا
login(token="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")

from transformers import pipeline

# تحميل النموذج المولّد للنصوص
recipe_generator = pipeline("text-generation", model="gpt2")

def generate_recipe(ingredients):
    # نص أساسي لتوليد الوصفة
    prompt = f"Create a recipe using the following ingredients: {ingredients}. Write detailed cooking instructions."

    # توليد الوصفة
    recipe = recipe_generator(prompt, max_length=200, num_return_sequences=1)
    return recipe[0]['generated_text']

# اختبار مع مكونات معينة
ingredients = "chicken, rice, tomatoes, garlic, onion"
recipe = generate_recipe(ingredients)
print(recipe)

!pip install diffusers transformers accelerate torch torchvision safetensors

# Ensure torch is imported before diffusers
!pip install --upgrade torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 # install PyTorch
!pip install diffusers --upgrade # install or upgrade Diffusers
!pip install accelerate # install accelerate

import torch  # Import torch explicitly at the beginning
from diffusers import StableDiffusionPipeline

# تحميل النموذج من Hugging Face
model_id = "CompVis/stable-diffusion-v1-4"  # يمكنك استبداله بأي نموذج آخر متوفر

# إعداد نموذج Stable Diffusion
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float32)  # استخدم float32 عند العمل على CPU

# اختيار الجهاز المناسب (GPU إذا كان متوفراً أو CPU)
device = "cuda" if torch.cuda.is_available() else "cpu"
pipe = pipe.to(device)

# تثبيت مكتبات Stable Diffusion
!pip install diffusers transformers accelerate

from diffusers import StableDiffusionPipeline
import torch

# تحميل نموذج Stable Diffusion
model_id = "CompVis/stable-diffusion-v1-4"

# إعداد النموذج
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")

def generate_image(description):
    # توليد الصورة
    image = pipe(description).images[0]
    # حفظ الصورة
    image.save("output_image.png")
    return "output_image.png"

# وصف الطبق
description = "A plate of chicken rice with tomatoes, garlic, and onion in a cozy kitchen."
image_path = generate_image(description)

print("Image generated and saved at:", image_path)

from google.colab import files
files.download("output_image.png")

def generate_recipe(ingredients):
  """Generates a recipe based on the given ingredients.

  This is a placeholder function. You need to replace this with your
  actual recipe generation logic.

  Args:
    ingredients: A list of ingredients.

  Returns:
    A string containing the generated recipe.
  """
  # Placeholder: Replace this with your actual recipe generation logic
  recipe = f"Recipe using: {', '.join(ingredients)}\n\n"
  recipe += "Instructions:\n1. ...\n2. ...\n3. ..."
  return recipe

ingredients = ["chicken", "rice", "tomatoes", "onions", "garlic"]

# Generate the recipe
recipe_text = generate_recipe(ingredients)
print("Generated Recipe:\n", recipe_text)

# ... (Rest of your code) ...

from IPython.display import Image, display

ingredients = ["chicken", "rice", "tomatoes", "onions", "garlic"]

# توليد الوصفة
recipe_text = generate_recipe(ingredients)
print("Generated Recipe:\n", recipe_text)

# توليد صورة للطبق
image_path = generate_image(recipe_text[:100])  # اختصر الوصفة كوصف للطبق

# عرض الصورة باستخدام IPython.display.Image
display(Image(filename=image_path))

# استيراد المكتبات المطلوبة
from transformers import pipeline
from diffusers import StableDiffusionPipeline
import torch
import re
from PIL import Image

# تحميل نموذج توليد النصوص من Hugging Face
generator = pipeline("text-generation", model="gpt2")

# تحميل نموذج Stable Diffusion لتوليد الصور
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda" if torch.cuda.is_available() else "cpu")

# دالة لتنظيف النصوص الناتجة
def clean_recipe_text(text):
    clean_text = re.sub(r"\.{3,}", ".", text)  # إزالة النقاط المتكررة
    clean_text = re.sub(r"\n+", "\n", clean_text)  # إزالة الأسطر الفارغة المتكررة
    return clean_text.strip()

# دالة لتوليد الوصفة
def generate_recipe(ingredients):
    prompt = f"Generate a detailed recipe using these ingredients: {', '.join(ingredients)}.\n\nIngredients:\n- {', '.join(ingredients)}\n\nInstructions:"
    recipe = generator(prompt, max_length=300, temperature=0.7, num_return_sequences=1)
    return clean_recipe_text(recipe[0]['generated_text'])

# دالة لتوليد الصورة
def generate_image(description):
    image = pipe(description).images[0]
    return image

# طلب المكونات من المستخدم
ingredients = input("Enter ingredients separated by commas: ").split(',')

# توليد الوصفة
recipe = generate_recipe(ingredients)
print("\nGenerated Recipe:\n", recipe)

# وصف الصورة بناءً على الوصفة
description = f"A delicious dish made with {', '.join(ingredients)}, beautifully garnished and served on a rustic table."

# توليد الصورة
image = generate_image(description)

# عرض الصورة وحفظها
image.show()
image.save("generated_recipe_image.png")
print("\nImage saved as 'generated_recipe_image.png'")

import streamlit as st

# إعداد واجهة المستخدم
st.title("أداة توليد الوصفات")

ingredients_input = st.text_area("أدخل المكونات المتاحة لديك:", "chicken, rice, tomatoes, garlic, onion")

if st.button("توليد الوصفة"):
    recipe = generate_recipe(ingredients_input)
    st.write("### الوصفة المولدة:")
    st.write(recipe)

    # توليد صورة للطبق
    image_url = generate_image(recipe)
    st.image(image_url, caption="صورة الطبق", use_column_width=True)

!ls
